{"version":3,"sources":["Components/Classifier/Classifier.js","App.js","serviceWorker.js","index.js"],"names":["Classifier","state","files","isLoading","recentImage","onDrop","setState","loadImage","setTimeout","console","log","activateSpinner","deactivateSpinner","sendImage","formData","FormData","append","name","axios","post","headers","then","resp","getTmageClass","data","id","catch","err","obj","get","this","map","file","key","size","accept","isDragActive","getRootProps","getInputProps","className","style","fontSize","length","Button","variant","onClick","Spinner","animation","role","Fragment","Alert","classified","Image","src","picture","height","rounded","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8WAoHeA,E,4MA7GXC,MAAQ,CACJC,MAAM,GACNC,WAAW,EACXC,YAAY,M,EAIhBC,OAAQ,SAACH,GACL,EAAKI,SAAS,CAACJ,MAAM,GACrBC,WAAW,EACXC,YAAY,OAEZ,EAAKG,UAAUL,I,EAEnBK,UAAU,SAACL,GACPM,YAAW,WACP,EAAKF,SAAS,CACVJ,QACAC,WAAW,IACZ,WACCM,QAAQC,IAAI,EAAKT,MAAMC,YAE5B,M,EAEPS,gBAAkB,WACd,EAAKL,SAAS,CACVJ,MAAM,GACNC,WAAU,K,EAIlBS,kBAAkB,WACd,EAAKN,SAAS,CACVH,WAAU,K,EAGlBU,UAAY,WACR,EAAKF,kBACL,IAAIG,EAAW,IAAIC,SACnBD,EAASE,OAAO,UAAW,EAAKf,MAAMC,MAAM,GAAI,EAAKD,MAAMC,MAAM,GAAGe,MACpEC,IAAMC,KAAK,oCAAqCL,EAAS,CACrDM,QAAQ,CACJ,OAAU,mBACV,eAAgB,yBAGvBC,MAAK,SAAAC,GACF,EAAKC,cAAcD,GACnBb,QAAQC,IAAIY,EAAKE,KAAKC,OAEzBC,OAAM,SAAAC,GACHlB,QAAQC,IAAI,uBAAyBiB,O,EAI7CJ,cAAe,SAACK,GACZV,IAAMW,IAAN,2CAA8CD,EAAIJ,KAAKC,GAAvD,KAA8D,CAC1DL,QAAQ,CACJ,OAAU,sBAIjBC,MAAK,SAAAC,GACF,EAAKhB,SAAS,CAACF,YAAYkB,IAC3Bb,QAAQC,IAAIY,MAEfI,OAAM,SAAAC,GACHlB,QAAQC,IAAIiB,MAEhB,EAAKf,qB,uDAEC,IAAD,OACCV,EAAQ4B,KAAK7B,MAAMC,MAAM6B,KAAI,SAAAC,GAAI,OACnC,wBAAIC,IAAKD,EAAKf,MACXe,EAAKf,KADR,MACiBe,EAAKE,KADtB,aAIJ,OACI,kBAAC,IAAD,CAAU7B,OAAQyB,KAAKzB,OAAQ8B,OAAO,0BACrC,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,cAA9B,OACG,6BAASC,UAAU,aACf,wBAASF,EAAa,CAACE,UAAW,kBAClC,0BAAWD,KACX,uBAAGC,UAAU,oBAAoBC,MAAO,CAACC,SAAS,OAClD,uBAAGF,UAAU,cAAeH,EAAe,mBAAqB,4DAEhE,+BACClC,GAEA,EAAKD,MAAMC,MAAMwC,OAAS,GAC3B,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOV,KAAK,KAAKW,QAAS,EAAKhC,WAA/C,gBAEC,EAAKZ,MAAME,WACZ,kBAAC2C,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC7B,0BAAMT,UAAU,WAAhB,eAEH,EAAKtC,MAAMG,aACZ,kBAAC,IAAM6C,SAAP,KACI,kBAACC,EAAA,EAAD,CAAON,QAAQ,WACd,EAAK3C,MAAMG,YAAYoB,KAAK2B,YAC7B,kBAACC,EAAA,EAAD,CAAOb,UAAU,yBAAyBc,IAAK,EAAKpD,MAAMG,YAAYoB,KAAK8B,QAASC,OAAO,MAAMC,SAAO,a,GArGvGC,aCYVC,MAXf,WACE,OACE,yBAAKnB,UAAU,OAEf,kBAAC,EAAD,QCCgBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAgD,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.c8fc2cbf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Dropzone from 'react-dropzone';\r\nimport './Classifier.css'\r\nimport {Spinner, Button, Alert, Image} from 'react-bootstrap'\r\nimport axios from 'axios'\r\n\r\nclass Classifier extends Component {\r\n    state = { \r\n        files:[],\r\n        isLoading: false,\r\n        recentImage:null\r\n    }\r\n\r\n   \r\n    onDrop =(files) =>{\r\n        this.setState({files:[],\r\n        isLoading: true,\r\n        recentImage:null\r\n    })\r\n        this.loadImage(files)\r\n        }\r\n    loadImage=(files)=>{\r\n        setTimeout(()=> {\r\n            this.setState({\r\n                files,\r\n                isLoading: false\r\n            }, () => {\r\n                console.log(this.state.files)\r\n            })\r\n        }, 1000);\r\n    }\r\n    activateSpinner = ()=>{\r\n        this.setState({\r\n            files:[],\r\n            isLoading:true\r\n        })\r\n    }\r\n\r\n    deactivateSpinner=()=>{\r\n        this.setState({\r\n            isLoading:false\r\n        })\r\n    }\r\n    sendImage = () => {\r\n        this.activateSpinner()\r\n        let formData = new FormData()\r\n        formData.append('picture', this.state.files[0], this.state.files[0].name)\r\n        axios.post('http://127.0.0.1:8000/api/images/', formData,{\r\n            headers:{\r\n                'accept': 'application/json',\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        })\r\n        .then(resp=>{\r\n            this.getTmageClass(resp)\r\n            console.log(resp.data.id)\r\n        })\r\n        .catch(err=>{\r\n            console.log('Error message here: ' + err)\r\n        })\r\n    }\r\n\r\n    getTmageClass =(obj)=> {\r\n        axios.get(`http://127.0.0.1:8000/api/images/${obj.data.id}/`, {\r\n            headers:{\r\n                'accept': 'application/json',\r\n                // 'content-type': 'multipart/form-data'\r\n            }\r\n        })\r\n        .then(resp=>{\r\n            this.setState({recentImage:resp})\r\n            console.log(resp)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n        this.deactivateSpinner()\r\n    }\r\n    render() {\r\n        const files = this.state.files.map(file => (\r\n            <li key={file.name}>\r\n              {file.name} - {file.size} bytes\r\n            </li>\r\n          ));\r\n        return ( \r\n            <Dropzone onDrop={this.onDrop} accept='image/png, image/jpeg'>\r\n            {({isDragActive, getRootProps, getInputProps}) => (\r\n                <section className=\"container\">\r\n                    <div {...getRootProps({className: 'dropzone back'})}>\r\n                    <input {...getInputProps()} />\r\n                    <i className=\"far fa-image mb-2\" style={{fontSize:100}}></i>\r\n                    <p className='text-muted' >{isDragActive ? \"Drop some images\" : \"Drag 'n' drop some files here, or click to select files\"}</p>\r\n                    </div>\r\n                    <aside>\r\n                    {files}\r\n                    </aside>\r\n                    {this.state.files.length > 0 &&\r\n                    <Button variant='info' size='lg' onClick={this.sendImage}>Select Image</Button>\r\n                    }\r\n                    {this.state.isLoading &&\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>}\r\n                    {this.state.recentImage &&\r\n                    <React.Fragment>\r\n                        <Alert variant='primary'>\r\n                        {this.state.recentImage.data.classified}</Alert>\r\n                        <Image className='justify-content-center' src={this.state.recentImage.data.picture} height='200' rounded/>\r\n                    </React.Fragment>}\r\n                </section>\r\n                )}\r\n            </Dropzone>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Classifier;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import Button from 'react-bootstrap/Button';\nimport Classifier from './Components/Classifier/Classifier';\n// import ImageList from './Components/ImageList/ImageList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    {/* <ImageList /> */}\n    <Classifier/>\n      {/* <h1>hello world</h1>\n      <Button variant='primary'>Test Button</Button> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}